(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = global || self, global.GooglePlacesAutocomplete = factory());
}(this, (function () { 'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function element(name) {
        return document.createElement(name);
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : options.context || []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    let isLoadingLibrary = false;

    /**
     * The list of callbacks, one from each GooglePlacesAutocomplete instance that requested the library before the library
     * had finished loading.
     */
    const callbacks = [];

    function hasLoadedLibrary() {
      return window.google && window.google.maps && window.google.maps.places
    }

    /**
     * Load the Google Places library and notify the calling code (if given a callback) once the library is ready.
     *
     * This supports three scenarios:
     * 1. The library hasn't been loaded yet and isn't in the process of loading yet.
     * 2. The library hasn't been loaded yet but is already in the process of loading.
     * 3. The library has already been loaded.
     *
     * In scenarios 1 and 2, any callbacks that have been provided (which could be multiple, if multiple
     * GooglePlacesAutocomplete instances are in use) will be called when the library finishes loading.
     *
     * In scenario 3, the callback will be called immediately.
     *
     * @param apiKey Your Google Places API Key
     * @param callback A callback (if you want to be notified when the library is available for use)
     */
    function loadGooglePlacesLibrary(apiKey, callback) {
      if (hasLoadedLibrary()) {
        callback();
        return
      }
      
      callback && callbacks.push(callback);
      
      if (isLoadingLibrary) {
        return
      }
      
      isLoadingLibrary = true;
      
      const element = document.createElement('script');
      element.async = true;
      element.defer = true;
      element.onload = onLibraryLoaded;
      element.src = `//maps.googleapis.com/maps/api/js?key=${encodeURIComponent(apiKey)}&libraries=places`;
      element.type = 'text/javascript';

      document.head.appendChild(element);
    }

    function onLibraryLoaded() {
      isLoadingLibrary = false;
      let callback;
      while (callback = callbacks.pop()) {
        callback();
      }
    }

    /* src/GooglePlacesAutocomplete.svelte generated by Svelte v3.38.2 */

    function create_fragment(ctx) {
    	let input;
    	let input_class_value;
    	let mounted;
    	let dispose;

    	return {
    		c() {
    			input = element("input");
    			attr(input, "class", input_class_value = /*$$props*/ ctx[5].class);
    			attr(input, "placeholder", /*placeholder*/ ctx[0]);
    			input.value = /*value*/ ctx[1];
    		},
    		m(target, anchor) {
    			insert(target, input, anchor);
    			/*input_binding*/ ctx[8](input);

    			if (!mounted) {
    				dispose = [
    					listen(input, "change", /*onChange*/ ctx[3]),
    					listen(input, "keydown", /*onKeyDown*/ ctx[4])
    				];

    				mounted = true;
    			}
    		},
    		p(ctx, [dirty]) {
    			if (dirty & /*$$props*/ 32 && input_class_value !== (input_class_value = /*$$props*/ ctx[5].class)) {
    				attr(input, "class", input_class_value);
    			}

    			if (dirty & /*placeholder*/ 1) {
    				attr(input, "placeholder", /*placeholder*/ ctx[0]);
    			}

    			if (dirty & /*value*/ 2 && input.value !== /*value*/ ctx[1]) {
    				input.value = /*value*/ ctx[1];
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(input);
    			/*input_binding*/ ctx[8](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    function instance($$self, $$props, $$invalidate) {
    	let selectedLocationName;
    	let { apiKey } = $$props;
    	let { options = undefined } = $$props;
    	let { placeholder = undefined } = $$props;
    	let { value = "" } = $$props;
    	const dispatch = createEventDispatcher();
    	let inputField;

    	onMount(() => {
    		loadGooglePlacesLibrary(apiKey, () => {
    			const autocomplete = new google.maps.places.Autocomplete(inputField, options);

    			autocomplete.addListener("place_changed", () => {
    				const place = autocomplete.getPlace();

    				// There are circumstances where the place_changed event fires, but we
    				// were NOT given location data. I only want to propagate the event if we
    				// truly received location data from Google.
    				// See the `Type something, no suggestions, hit Enter` test case.
    				if (hasLocationData(place)) {
    					setSelectedLocation({ place, text: inputField.value });
    				}
    			});

    			dispatch("ready");
    		});
    	});

    	function emptyLocationField() {
    		$$invalidate(2, inputField.value = "", inputField);
    		onChange();
    	}

    	function hasLocationData(place) {
    		const fieldsToLookFor = options && options.fields || ["geometry"];
    		return place.hasOwnProperty(fieldsToLookFor[0]);
    	}

    	function onChange() {
    		if (inputField.value === "") {
    			setSelectedLocation(null);
    		}
    	}

    	function onKeyDown(event) {
    		const suggestionsAreVisible = document.getElementsByClassName("pac-item").length;

    		if (event.key === "Enter" || event.key === "Tab") {
    			if (suggestionsAreVisible) {
    				const isSuggestionSelected = document.getElementsByClassName("pac-item-selected").length;

    				if (!isSuggestionSelected) {
    					selectFirstSuggestion();
    				}
    			} else if (doesNotMatchSelectedLocation(inputField.value)) {
    				setTimeout(emptyLocationField, 10);
    			}
    		} else if (event.key === "Escape") {
    			setTimeout(emptyLocationField, 10);
    		}

    		if (suggestionsAreVisible) {
    			if (event.key === "Enter") {
    				/* When suggestions are visible, don't let an 'Enter' submit a form (since
     * the user is interacting with the list of suggestions at the time, not
     * expecting their actions to affect the form as a whole). */
    				event.preventDefault();
    			}
    		}
    	}

    	function selectFirstSuggestion() {
    		// Simulate the 'down arrow' key in order to select the first suggestion:
    		// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events
    		const simulatedEvent = new KeyboardEvent("keydown",
    		{
    				key: "ArrowDown",
    				code: "ArrowDown",
    				keyCode: 40
    			});

    		inputField.dispatchEvent(simulatedEvent);
    	}

    	function setSelectedLocation(data) {
    		selectedLocationName = data && data.text || "";
    		dispatch("place_changed", data);
    	}

    	function doesNotMatchSelectedLocation(value) {
    		return selectedLocationName !== value;
    	}

    	function input_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			inputField = $$value;
    			$$invalidate(2, inputField);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("apiKey" in $$new_props) $$invalidate(6, apiKey = $$new_props.apiKey);
    		if ("options" in $$new_props) $$invalidate(7, options = $$new_props.options);
    		if ("placeholder" in $$new_props) $$invalidate(0, placeholder = $$new_props.placeholder);
    		if ("value" in $$new_props) $$invalidate(1, value = $$new_props.value);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*value*/ 2) {
    			 selectedLocationName = value || "";
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		placeholder,
    		value,
    		inputField,
    		onChange,
    		onKeyDown,
    		$$props,
    		apiKey,
    		options,
    		input_binding
    	];
    }

    class GooglePlacesAutocomplete extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance, create_fragment, safe_not_equal, {
    			apiKey: 6,
    			options: 7,
    			placeholder: 0,
    			value: 1
    		});
    	}
    }

    return GooglePlacesAutocomplete;

})));
